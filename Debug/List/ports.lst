###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           23/Apr/2019  18:40:14
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\ports.c
#    Command line  =  
#        -f C:\Users\rambala\AppData\Local\Temp\EWB545.tmp
#        ("\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\ports.c" -lC
#        "\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\List" -o
#        "\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\List\ports.lst
#    Object file   =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\Obj\ports.r43
#
###############################################################################

\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project 10\ports.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file initializes all the pins under all ports
      4          //
      5          //  Ram Bala
      6          //  Jan 2019
      7          //  Built with IAR Embedded Workbench Version: V7.12.1
      8          // ------------------------------------------------------------------------------
      9          
     10          #include  "functions.h"
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x206
   \   union <unnamed> _A_PAREN_L
   \                     _A_PAREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x218
   \   union <unnamed> _A_PAIES_L
   \                     _A_PAIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x224
   \   union <unnamed> _A_PBDIR_L
   \                     _A_PBDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x226
   \   union <unnamed> _A_PBREN_L
   \                     _A_PBREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x22a
   \   union <unnamed> _A_PBSEL0_L
   \                     _A_PBSEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x22c
   \   union <unnamed> _A_PBSEL1_L
   \                     _A_PBSEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x238
   \   union <unnamed> _A_PBIES_L
   \                     _A_PBIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x244
   \   union <unnamed> _A_PCDIR_L
   \                     _A_PCDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x24a
   \   union <unnamed> _A_PCSEL0_L
   \                     _A_PCSEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x24c
   \   union <unnamed> _A_PCSEL1_L
   \                     _A_PCSEL1_L:
   \   000000                DS8 2
     12          #include "macros.h"
     13          #include "ports.h"
     14          
     15          // This calls the rest of the initialization functions

   \                                 In  segment CODE, align 2
     16          void Init_Ports(void) {
   \                     Init_Ports:
     17            Init_Port1();
   \   000000   ........     CALLA   #Init_Port1
     18            Init_Port2();
   \   000004   ........     CALLA   #Init_Port2
     19            Init_Port3(USE_SMCLK);
   \   000008   1C43         MOV.W   #0x1, R12
   \   00000A   ........     CALLA   #Init_Port3
     20            Init_Port4();
   \   00000E   ........     CALLA   #Init_Port4
     21            Init_Port5();
   \   000012   ........     CALLA   #Init_Port5
     22            Init_Port6();
   \   000016   ........     BRA     #Init_Port6
     23          }
     24          
     25          // This function will initialize all pins in port 1

   \                                 In  segment CODE, align 2
     26          void Init_Port1(void) {
   \                     Init_Port1:
     27            P1DIR = INIT_HIGH;
   \   000000   F2430402     MOV.B   #0xff, &0x204
     28            P1OUT = INIT_LOW;
   \   000004   C2430202     MOV.B   #0x0, &0x202
     29          
     30            P1SEL0 &= ~RED_LED; // RED_LED GPIO operation
   \   000008   D2C30A02     BIC.B   #0x1, &0x20a
     31            P1SEL1 &= ~RED_LED; // RED_LED GPIO operation
   \   00000C   D2C30C02     BIC.B   #0x1, &0x20c
     32            P1DIR |= RED_LED; // Direction = output
   \   000010   D2D30402     BIS.B   #0x1, &0x204
     33          
     34            P1SEL0 |= A1_SEEED; // AL_SEEED GPIO operation
   \   000014   E2D30A02     BIS.B   #0x2, &0x20a
     35            P1SEL0 |= A1_SEEED; // AL_SEEED GPIO operation
   \   000018   E2D30A02     BIS.B   #0x2, &0x20a
     36          
     37            P1SEL0 |= V_DETECT_L; // V_DETECT_L function operation ADC
   \   00001C   E2D20A02     BIS.B   #0x4, &0x20a
     38            P1SEL1 |= V_DETECT_L; // V_DETECT_L function operation ADC
   \   000020   E2D20C02     BIS.B   #0x4, &0x20c
     39          
     40            P1SEL0 |= V_DETECT_R; // V_DETECT_R function operation ADC
   \   000024   F2D20A02     BIS.B   #0x8, &0x20a
     41            P1SEL1 |= V_DETECT_R; // V_DETECT_R function operation ADC
   \   000028   F2D20C02     BIS.B   #0x8, &0x20c
     42          
     43            P1SEL0 |= A4_SEEED; // A4_SEEED function operation
   \   00002C   F2D010000A02 BIS.B   #0x10, &0x20a
     44            P1SEL1 |= A4_SEEED; // A4_SEEED function operation
   \   000032   F2D010000C02 BIS.B   #0x10, &0x20c
     45          
     46            P1SEL0 |= V_THUMB; // ADC input for V_THUMB
   \   000038   F2D020000A02 BIS.B   #0x20, &0x20a
     47            P1SEL1 |= V_THUMB; // ADC input for V_THUMB
   \   00003E   F2D020000C02 BIS.B   #0x20, &0x20c
     48           
     49            P1SEL0 |= UCA0RXD; // UCA0RXD function operation
   \   000044   F2D080000A02 BIS.B   #0x80, &0x20a
     50            P1SEL1 &= ~UCA0RXD; // UCA0RXD function operation
   \   00004A   F2C080000C02 BIC.B   #0x80, &0x20c
     51          
     52            P1SEL0 |= UCA0TXD; // UCA0TXD function operation
   \   000050   F2D040000A02 BIS.B   #0x40, &0x20a
     53            P1SEL1 &= ~UCA0TXD; // UCA0TXD function operation
   \   000056   F2C040000C02 BIC.B   #0x40, &0x20c
     54          
     55          }
   \   00005C   1001         RETA
   \   00005E                REQUIRE _A_PADIR_L
   \   00005E                REQUIRE _A_PAOUT_L
   \   00005E                REQUIRE _A_PASEL0_L
   \   00005E                REQUIRE _A_PASEL1_L
     56          
     57          // This function will initialize all pins in port 2

   \                                 In  segment CODE, align 2
     58          void Init_Port2(void) {
   \                     Init_Port2:
     59            P2DIR = INIT_HIGH; // Set P1 direction to output
   \   000000   F2430502     MOV.B   #0xff, &0x205
     60            P2OUT = INIT_LOW; // P1 set Low
   \   000004   C2430302     MOV.B   #0x0, &0x203
     61          
     62            P2SEL0 &= ~P2_0; // P2_0 GPIO operation
   \   000008   D2C30B02     BIC.B   #0x1, &0x20b
     63            P2SEL1 &= ~P2_0; // P2_0 GPIO operation
   \   00000C   D2C30D02     BIC.B   #0x1, &0x20d
     64            P2DIR &= ~P2_0; // Direction = input
   \   000010   D2C30502     BIC.B   #0x1, &0x205
     65          
     66            P2SEL0 &= ~P2_1; // P2_1 GPIO operation
   \   000014   E2C30B02     BIC.B   #0x2, &0x20b
     67            P2SEL1 &= ~P2_1; // P2_1 GPIO operation
   \   000018   E2C30D02     BIC.B   #0x2, &0x20d
     68            P2DIR &= ~P2_1; // Direction = input
   \   00001C   E2C30502     BIC.B   #0x2, &0x205
     69          
     70            P2SEL0 &= ~P2_2; // P2_2 GPIO operation
   \   000020   E2C20B02     BIC.B   #0x4, &0x20b
     71            P2SEL1 &= ~P2_2; // P2_2 GPIO operation
   \   000024   E2C20D02     BIC.B   #0x4, &0x20d
     72            P2DIR &= ~P2_2; // Direction = input
   \   000028   E2C20502     BIC.B   #0x4, &0x205
     73          
     74            P2SEL0 &= ~SW2; // SW2 Operation
   \   00002C   F2C20B02     BIC.B   #0x8, &0x20b
     75            P2SEL1 &= ~SW2; // SW2 Operation
   \   000030   F2C20D02     BIC.B   #0x8, &0x20d
     76            P2DIR &= ~SW2; // Direction = input
   \   000034   F2C20502     BIC.B   #0x8, &0x205
     77            P2OUT |= SW2; // Configure pullup resistor
   \   000038   F2D20302     BIS.B   #0x8, &0x203
     78            P2REN |= SW2; // Enable pullup resistor
   \   00003C   F2D20702     BIS.B   #0x8, &0x207
     79            // Interrupts
     80            P2IES |= SW2; // P2.0 Hi/Lo edge interrupt
   \   000040   F2D21902     BIS.B   #0x8, &0x219
     81            P2IFG &= ~SW2; // Clear all P2.6 interrupt flags
   \   000044   F2C21D02     BIC.B   #0x8, &0x21d
     82            P2IE |= SW2; // P2.6 interrupt enabled
   \   000048   F2D21B02     BIS.B   #0x8, &0x21b
     83          
     84            P2SEL0 &= ~P2_4; // P2_4 GPIO operation
   \   00004C   F2C010000B02 BIC.B   #0x10, &0x20b
     85            P2SEL1 &= ~P2_4; // P2_4 GPIO operation
   \   000052   F2C010000D02 BIC.B   #0x10, &0x20d
     86            P2DIR &= ~P2_4; // Direction = input
   \   000058   F2C010000502 BIC.B   #0x10, &0x205
     87          
     88            P2SEL0 &= ~P2_5; // P2_5 GPIO operation
   \   00005E   F2C020000B02 BIC.B   #0x20, &0x20b
     89            P2SEL1 &= ~P2_5; // P2_5 GPIO operation
   \   000064   F2C020000D02 BIC.B   #0x20, &0x20d
     90            P2DIR &= ~P2_5; // Direction = input
   \   00006A   F2C020000502 BIC.B   #0x20, &0x205
     91          
     92            P2SEL0 &= ~LFXOUT; // LFXOUT Clock operation
   \   000070   F2C040000B02 BIC.B   #0x40, &0x20b
     93            P2SEL1 |= LFXOUT; // LFXOUT Clock operation
   \   000076   F2D040000D02 BIS.B   #0x40, &0x20d
     94          
     95            P2SEL0 &= ~LFXIN; // LFXIN Clock operation
   \   00007C   F2C080000B02 BIC.B   #0x80, &0x20b
     96            P2SEL1 |= LFXIN; // LFXIN Clock operation
   \   000082   F2D080000D02 BIS.B   #0x80, &0x20d
     97          }
   \   000088   1001         RETA
   \   00008A                REQUIRE _A_PADIR_L
   \   00008A                REQUIRE _A_PAOUT_L
   \   00008A                REQUIRE _A_PASEL0_L
   \   00008A                REQUIRE _A_PASEL1_L
   \   00008A                REQUIRE _A_PAREN_L
   \   00008A                REQUIRE _A_PAIES_L
   \   00008A                REQUIRE _A_PAIFG_L
   \   00008A                REQUIRE _A_PAIE_L
     98          
     99          // This function will initialize all pins in port 3

   \                                 In  segment CODE, align 2
    100          void Init_Port3(int mode) {
   \                     Init_Port3:
    101            P3DIR = INIT_HIGH;
   \   000000   F2432402     MOV.B   #0xff, &0x224
    102            P3OUT = INIT_LOW;
   \   000004   C2432202     MOV.B   #0x0, &0x222
    103            
    104          
    105            P3SEL0 &= ~TEST_PROBE; // TEST PROBE GPIO operation
   \   000008   D2C32A02     BIC.B   #0x1, &0x22a
    106            P3SEL1 &= ~TEST_PROBE; // TEST PROBE GPIO operation
   \   00000C   D2C32C02     BIC.B   #0x1, &0x22c
    107            P3DIR |= TEST_PROBE; // Direction = output
   \   000010   D2D32402     BIS.B   #0x1, &0x224
    108          
    109            P3SEL0 |= OA20; // OA20 function operation
   \   000014   E2D32A02     BIS.B   #0x2, &0x22a
    110            P3SEL1 |= OA20; // OA20 function operation
   \   000018   E2D32C02     BIS.B   #0x2, &0x22c
    111          
    112            P3SEL0 |= OA2N; // OA2N function operation
   \   00001C   E2D22A02     BIS.B   #0x4, &0x22a
    113            P3SEL1 |= OA2N; // OA2N function operation
   \   000020   E2D22C02     BIS.B   #0x4, &0x22c
    114          
    115            P3SEL0 |= OA2P; // OA2P function operation
   \   000024   F2D22A02     BIS.B   #0x8, &0x22a
    116            P3SEL1 |= OA2P; // OA2P function operation
   \   000028   F2D22C02     BIS.B   #0x8, &0x22c
    117          
    118            // If the mode is SMCLK (1), then the pins are set to 01 to use SMCLK
    119            // If the mode is GPIO (0), then the pins are set to 00 to turn off SMCLK
    120            if (mode == USE_SMCLK) {
   \   00002C   1C93         CMP.W   #0x1, R12
   \   00002E   0920         JNE     ??Init_Port3_0
    121              P3SEL0 |= SMCLK_OUT; // SMCLK function operation
   \   000030   F2D010002A02 BIS.B   #0x10, &0x22a
    122              P3SEL1 &= ~SMCLK_OUT; // SMCLK function operation
   \   000036   F2C010002C02 BIC.B   #0x10, &0x22c
    123              P3DIR |= SMCLK_OUT; // setting direction to output
   \   00003C   F2D010002402 BIS.B   #0x10, &0x224
    124            }
    125          
    126            if (mode == USE_GPIO) {
   \                     ??Init_Port3_0:
   \   000042   0C93         CMP.W   #0x0, R12
   \   000044   0920         JNE     ??Init_Port3_1
    127              P3SEL0 &= ~SMCLK_OUT; // Set SMCLK to 0 so it is off
   \   000046   F2C010002A02 BIC.B   #0x10, &0x22a
    128              P3SEL1 &= ~SMCLK_OUT;
   \   00004C   F2C010002C02 BIC.B   #0x10, &0x22c
    129              P3DIR &= ~SMCLK_OUT; // Direction is set to input since pin is not used
   \   000052   F2C010002402 BIC.B   #0x10, &0x224
    130            }
    131          
    132            P3SEL0 &= ~P3_5; // Port not defined yet, set to 0
   \                     ??Init_Port3_1:
   \   000058   F2C020002A02 BIC.B   #0x20, &0x22a
    133            P3SEL1 &= ~P3_5; // Port not defined yet, set to 0
   \   00005E   F2C020002C02 BIC.B   #0x20, &0x22c
    134            P3DIR &= ~P3_5; // Direction = input
   \   000064   F2C020002402 BIC.B   #0x20, &0x224
    135          
    136            P3SEL0 &= ~IOT_LINK;
   \   00006A   F2C040002A02 BIC.B   #0x40, &0x22a
    137            P3SEL1 &= ~IOT_LINK;
   \   000070   F2C040002C02 BIC.B   #0x40, &0x22c
    138            P3DIR &= ~IOT_LINK; // Direction = input
   \   000076   F2C040002402 BIC.B   #0x40, &0x224
    139          
    140            P3SEL0 &= ~P3_7; // Port not defined yet, set to 0
   \   00007C   F2C080002A02 BIC.B   #0x80, &0x22a
    141            P3SEL1 &= ~P3_7; // Port not defined yet, set to 0
   \   000082   F2C080002C02 BIC.B   #0x80, &0x22c
    142            P3DIR &= ~P3_7; // Direction = output
   \   000088   F2C080002402 BIC.B   #0x80, &0x224
    143          
    144          }
   \   00008E   1001         RETA
   \   000090                REQUIRE _A_PBDIR_L
   \   000090                REQUIRE _A_PBOUT_L
   \   000090                REQUIRE _A_PBSEL0_L
   \   000090                REQUIRE _A_PBSEL1_L
    145          
    146          // This function will initialize all pins in port 4

   \                                 In  segment CODE, align 2
    147          void Init_Port4(void) {
   \                     Init_Port4:
    148            P4DIR = INIT_HIGH; // Set P4 direction to output
   \   000000   F2432502     MOV.B   #0xff, &0x225
    149            P4OUT = INIT_LOW; // P4 set Low
   \   000004   C2432302     MOV.B   #0x0, &0x223
    150          
    151            P4SEL0 &= ~RESET_LCD; // RESET_LCD GPIO operation
   \   000008   D2C32B02     BIC.B   #0x1, &0x22b
    152            P4SEL1 &= ~RESET_LCD; // RESET_LCD GPIO operation
   \   00000C   D2C32D02     BIC.B   #0x1, &0x22d
    153            P4DIR |= RESET_LCD; // Set RESET_LCD direction to output
   \   000010   D2D32502     BIS.B   #0x1, &0x225
    154            P4OUT |= RESET_LCD; // Set RESET_LCD Off [High]
   \   000014   D2D32302     BIS.B   #0x1, &0x223
    155          
    156            P4SEL0 &= ~SW1; // SW1 GPIO operation
   \   000018   E2C32B02     BIC.B   #0x2, &0x22b
    157            P4SEL1 &= ~SW1; // SW1 GPIO operation
   \   00001C   E2C32D02     BIC.B   #0x2, &0x22d
    158            P4DIR &= ~SW1; // Direction = input
   \   000020   E2C32502     BIC.B   #0x2, &0x225
    159            P4OUT |= SW1; // Configure pullup resistor
   \   000024   E2D32302     BIS.B   #0x2, &0x223
    160            P4REN |= SW1; // Enable pullup resistor
   \   000028   E2D32702     BIS.B   #0x2, &0x227
    161            // Interrupts
    162            P4IES |= SW1; // P2.0 Hi/Lo edge interrupt
   \   00002C   E2D33902     BIS.B   #0x2, &0x239
    163            P4IFG &= ~SW1; // Clear all P2.6 interrupt flags
   \   000030   E2C33D02     BIC.B   #0x2, &0x23d
    164            P4IE |= SW1; // P2.6 interrupt enabled
   \   000034   E2D33B02     BIS.B   #0x2, &0x23b
    165          
    166            P4SEL0 |= UCA1TXD; // USCI_A1 UART operation
   \   000038   F2D22B02     BIS.B   #0x8, &0x22b
    167            P4SEL1 &= ~UCA1TXD; // USCI_A1 UART operation
   \   00003C   F2C22D02     BIC.B   #0x8, &0x22d
    168          
    169            P4SEL0 |= UCA1RXD; // USCI_A1 UART operation
   \   000040   E2D22B02     BIS.B   #0x4, &0x22b
    170            P4SEL1 &= ~UCA1RXD; // USCI_A1 UART operation
   \   000044   E2C22D02     BIC.B   #0x4, &0x22d
    171          
    172            P4SEL0 &= ~UCB1_CS_LCD; // UCB1_CS_LCD GPIO operation
   \   000048   F2C010002B02 BIC.B   #0x10, &0x22b
    173            P4SEL1 &= ~UCB1_CS_LCD; // UCB1_CS_LCD GPIO operation
   \   00004E   F2C010002D02 BIC.B   #0x10, &0x22d
    174            P4DIR |= UCB1_CS_LCD; // Set SPI_CS_LCD direction to output
   \   000054   F2D010002502 BIS.B   #0x10, &0x225
    175            P4OUT |= UCB1_CS_LCD; // Set SPI_CS_LCD Off [High]
   \   00005A   F2D010002302 BIS.B   #0x10, &0x223
    176          
    177            P4SEL0 |= UCB1CLK; // UCB1CLK SPI BUS operation
   \   000060   F2D020002B02 BIS.B   #0x20, &0x22b
    178            P4SEL1 &= ~UCB1CLK; // UCB1CLK SPI BUS operation
   \   000066   F2C020002D02 BIC.B   #0x20, &0x22d
    179          
    180            P4SEL0 |= UCB1SIMO; // UCB1SIMO SPI BUS operation
   \   00006C   F2D040002B02 BIS.B   #0x40, &0x22b
    181            P4SEL1 &= ~UCB1SIMO; // UCB1SIMO SPI BUS operation
   \   000072   F2C040002D02 BIC.B   #0x40, &0x22d
    182          
    183            P4SEL0 |= UCB1SOMI; // UCB1SOMI SPI BUS operation
   \   000078   F2D080002B02 BIS.B   #0x80, &0x22b
    184            P4SEL1 &= ~UCB1SOMI; // UCB1SOMI SPI BUS operation
   \   00007E   F2C080002D02 BIC.B   #0x80, &0x22d
    185          }
   \   000084   1001         RETA
   \   000086                REQUIRE _A_PBDIR_L
   \   000086                REQUIRE _A_PBOUT_L
   \   000086                REQUIRE _A_PBSEL0_L
   \   000086                REQUIRE _A_PBSEL1_L
   \   000086                REQUIRE _A_PBREN_L
   \   000086                REQUIRE _A_PBIES_L
   \   000086                REQUIRE _A_PBIFG_L
   \   000086                REQUIRE _A_PBIE_L
    186          
    187          // This function will initialize all pins in port 5

   \                                 In  segment CODE, align 2
    188          void Init_Port5(void) {
   \                     Init_Port5:
    189            P5DIR = INIT_HIGH;
   \   000000   F2434402     MOV.B   #0xff, &0x244
    190            P5OUT = INIT_LOW;
   \   000004   C2434202     MOV.B   #0x0, &0x242
    191          
    192            P5SEL0 &= ~IOT_RESET; // IOT_RESET GPIO operation
   \   000008   D2C34A02     BIC.B   #0x1, &0x24a
    193            P5SEL1 &= ~IOT_RESET; // IOT_RESET GPIO operation
   \   00000C   D2C34C02     BIC.B   #0x1, &0x24c
    194            P5DIR |= IOT_RESET; // Direction = output
   \   000010   D2D34402     BIS.B   #0x1, &0x244
    195            P5OUT &= ~IOT_RESET;
   \   000014   D2C34202     BIC.B   #0x1, &0x242
    196          
    197            P5SEL0 &= ~P5_1; // Port not defined yet, set to 0
   \   000018   E2C34A02     BIC.B   #0x2, &0x24a
    198            P5SEL1 &= ~P5_1; // Port not defined yet, set to 0
   \   00001C   E2C34C02     BIC.B   #0x2, &0x24c
    199            P5DIR &= ~P5_1; // Direction = input
   \   000020   E2C34402     BIC.B   #0x2, &0x244
    200          
    201            P5SEL0 &= ~IOT_PROG_SEL; // IOT_PROG_SEL GPIO operation
   \   000024   E2C24A02     BIC.B   #0x4, &0x24a
    202            P5SEL1 &= ~IOT_PROG_SEL; // IOT_PROG_SEL GPIO operation
   \   000028   E2C24C02     BIC.B   #0x4, &0x24c
    203            P5DIR &= ~IOT_PROG_SEL; // Direction = input
   \   00002C   E2C24402     BIC.B   #0x4, &0x244
    204          
    205            P5SEL0 &= ~IOT_PROG_MODE;
   \   000030   F2C24A02     BIC.B   #0x8, &0x24a
    206            P5SEL1 &= ~IOT_PROG_MODE;
   \   000034   F2C24C02     BIC.B   #0x8, &0x24c
    207            P5DIR &= ~IOT_PROG_MODE; // Direction = input
   \   000038   F2C24402     BIC.B   #0x8, &0x244
    208          
    209            P5SEL0 &= ~IR_LED;
   \   00003C   F2C010004A02 BIC.B   #0x10, &0x24a
    210            P5SEL1 &= ~IR_LED;
   \   000042   F2C010004C02 BIC.B   #0x10, &0x24c
    211            P5DIR |= IR_LED; // Direction = output
   \   000048   F2D010004402 BIS.B   #0x10, &0x244
    212          
    213          }
   \   00004E   1001         RETA
   \   000050                REQUIRE _A_PCDIR_L
   \   000050                REQUIRE _A_PCOUT_L
   \   000050                REQUIRE _A_PCSEL0_L
   \   000050                REQUIRE _A_PCSEL1_L
    214          
    215          // This function will initialize all pins in port 6

   \                                 In  segment CODE, align 2
    216          void Init_Port6(void) {
   \                     Init_Port6:
    217            P6DIR = INIT_HIGH;
   \   000000   F2434502     MOV.B   #0xff, &0x245
    218            P6OUT = INIT_LOW;
   \   000004   C2434302     MOV.B   #0x0, &0x243
    219          
    220            P6SEL0 |= R_FORWARD; // R_FORWARD operation
   \   000008   D2D34B02     BIS.B   #0x1, &0x24b
    221            P6SEL1 &= ~R_FORWARD; // R_FORWARD operation
   \   00000C   D2C34D02     BIC.B   #0x1, &0x24d
    222            P6DIR |= R_FORWARD; // Direction = output
   \   000010   D2D34502     BIS.B   #0x1, &0x245
    223          
    224            P6SEL0 |= L_FORWARD;
   \   000014   E2D34B02     BIS.B   #0x2, &0x24b
    225            P6SEL1 &= ~L_FORWARD;
   \   000018   E2C34D02     BIC.B   #0x2, &0x24d
    226            P6DIR |= L_FORWARD; // Direction = output
   \   00001C   E2D34502     BIS.B   #0x2, &0x245
    227          
    228            P6SEL0 |= R_REVERSE;
   \   000020   E2D24B02     BIS.B   #0x4, &0x24b
    229            P6SEL1 &= ~R_REVERSE;
   \   000024   E2C24D02     BIC.B   #0x4, &0x24d
    230            P6DIR |= R_REVERSE; // Direction = output
   \   000028   E2D24502     BIS.B   #0x4, &0x245
    231          
    232            P6SEL0 |= L_REVERSE; // ;_REVERSE operation
   \   00002C   F2D24B02     BIS.B   #0x8, &0x24b
    233            P6SEL1 &= ~L_REVERSE;
   \   000030   F2C24D02     BIC.B   #0x8, &0x24d
    234            P6DIR |= L_REVERSE; // Direction = output
   \   000034   F2D24502     BIS.B   #0x8, &0x245
    235          
    236            P6SEL0 &= ~LCD_BACKLITE; // LCD_BACKLITE operation
   \   000038   F2C010004B02 BIC.B   #0x10, &0x24b
    237            P6SEL1 &= ~LCD_BACKLITE; // LCD_BACKLITE operation
   \   00003E   F2C010004D02 BIC.B   #0x10, &0x24d
    238            P6DIR |= LCD_BACKLITE; // Direction = output
   \   000044   F2D010004502 BIS.B   #0x10, &0x245
    239            P6OUT &= ~LCD_BACKLITE; // Set output to 1
   \   00004A   F2C010004302 BIC.B   #0x10, &0x243
    240          
    241            P6SEL0 &= ~P6_5; // Port not defined yet, set to 0
   \   000050   F2C020004B02 BIC.B   #0x20, &0x24b
    242            P6SEL1 &= ~P6_5; // Port not defined yet, set to 0
   \   000056   F2C020004D02 BIC.B   #0x20, &0x24d
    243            P6DIR &= ~P6_5; // Direction = input
   \   00005C   F2C020004502 BIC.B   #0x20, &0x245
    244          
    245            P6SEL0 &= ~GRN_LED; // GRN_LED operation
   \   000062   F2C040004B02 BIC.B   #0x40, &0x24b
    246            P6SEL1 &= ~GRN_LED; // GREN_LED operation
   \   000068   F2C040004D02 BIC.B   #0x40, &0x24d
    247            P6DIR |= GRN_LED; // Direction = output
   \   00006E   F2D040004502 BIS.B   #0x40, &0x245
    248          
    249          }
   \   000074   1001         RETA
   \   000076                REQUIRE _A_PCDIR_L
   \   000076                REQUIRE _A_PCOUT_L
   \   000076                REQUIRE _A_PCSEL0_L
   \   000076                REQUIRE _A_PCSEL1_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Port1
      4   Init_Port2
      4   Init_Port3
      4   Init_Port4
      4   Init_Port5
      4   Init_Port6
      4   Init_Ports
        4   -> Init_Port1
        4   -> Init_Port2
        4   -> Init_Port3
        4   -> Init_Port4
        4   -> Init_Port5
        0   -> Init_Port6


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      94  Init_Port1
     138  Init_Port2
     144  Init_Port3
     134  Init_Port4
      80  Init_Port5
     118  Init_Port6
      26  Init_Ports
       2  _A_PADIR_L
       2  _A_PAIES_L
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PAOUT_L
       2  _A_PAREN_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_PBDIR_L
       2  _A_PBIES_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PBOUT_L
       2  _A_PBREN_L
       2  _A_PBSEL0_L
       2  _A_PBSEL1_L
       2  _A_PCDIR_L
       2  _A_PCOUT_L
       2  _A_PCSEL0_L
       2  _A_PCSEL1_L

 
 734 bytes in segment CODE
  40 bytes in segment DATA16_AN
 
 734 bytes of CODE memory
   0 bytes of DATA memory (+ 40 bytes shared)

Errors: none
Warnings: none
