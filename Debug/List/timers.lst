###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           23/Apr/2019  18:40:14
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\timers.c
#    Command line  =  
#        -f C:\Users\rambala\AppData\Local\Temp\EWB7E9.tmp
#        ("\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\timers.c" -lC
#        "\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\List" -o
#        "\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\List\timers.lst
#    Object file   =  
#        \\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project
#        10\Debug\Obj\timers.r43
#
###############################################################################

\\Mac\Home\Desktop\ECE306\autonomous-iot-vehicle\Projects\Project 10\timers.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the interrupt initialization for the timer B0 port
      4          //
      5          //
      6          //  Ram Bala
      7          //  Feb 2019
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include "macros.h"
     12          #include "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     14          

   \                                 In  segment CODE, align 2
     15          void Init_Timers(void) {
   \                     Init_Timers:
     16          	Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     17          	Init_Timer_B1();
   \   000004   ........     CALLA   #Init_Timer_B1
     18          	Init_Timer_B3();
   \   000008   ........     BRA     #Init_Timer_B3
     19          }
     20          
     21          // Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow

   \                                 In  segment CODE, align 2
     22          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     23          	//--------------------------------------------------------------------
     24          	// Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow
     25          	TB0CTL = RESET_REGISTER; // Clear TB0 Control Register
   \   000000   82438003     MOV.W   #0x0, &0x380
     26          	TB0EX0 = RESET_REGISTER; // Clear TAIDEX Register
   \   000004   8243A003     MOV.W   #0x0, &0x3a0
     27          	TB0CTL |= TBSSEL__SMCLK; // SMCLK source
   \   000008   B2D000028003 BIS.W   #0x200, &0x380
     28          	TB0CTL |= MC__CONTINOUS; // Continuous up to 0xFFFF and overflow
   \   00000E   B2D020008003 BIS.W   #0x20, &0x380
     29          	TB0CTL |= ID__2; // Divide clock by 2
   \   000014   B2D040008003 BIS.W   #0x40, &0x380
     30          	TB0EX0 |= TBIDEX__8; // Divide clock by an additional 8
   \   00001A   B2D00700A003 BIS.W   #0x7, &0x3a0
     31          	TB0CTL |= TBCLR; // Resets TB0R,
   \   000020   A2D28003     BIS.W   #0x4, &0x380
     32          	// Capture Compare 0
     33          	// #pragma vector = TIMER0_B0_VECTOR
     34          	// Capture Compare 0
     35          	TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   000024   B240A8619203 MOV.W   #0x61a8, &0x392
     36          	TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   00002A   B2D010008203 BIS.W   #0x10, &0x382
     37          	// Capture Compare 1,2, Overflow
     38          	// #pragma vector = TIMER0_A1_VECTOR
     39          	// Capture compare 1
     40          	TB0CCR1 = TB0CCR1_INTERVAL;// CCR1
   \   000030   B240A8619403 MOV.W   #0x61a8, &0x394
     41          	//TB0CCTL1 |= CCIE; // CCR1 enable interrupt
     42          	// Capture compare 2
     43          	TB0CCR2 = TB0CCR2_INTERVAL;// CCR2
   \   000036   B240A8619603 MOV.W   #0x61a8, &0x396
     44          	//TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     45          	// Overflow
     46          	TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   00003C   A2C38003     BIC.W   #0x2, &0x380
     47          	TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000040   92C38003     BIC.W   #0x1, &0x380
     48          	//--------------------------------------------------------------------
     49          }
   \   000044   1001         RETA
   \   000046                REQUIRE _A_TB0CTL_L
   \   000046                REQUIRE _A_TB0EX0_L
   \   000046                REQUIRE _A_TB0CCR0_L
   \   000046                REQUIRE _A_TB0CCTL0_L
   \   000046                REQUIRE _A_TB0CCR1_L
   \   000046                REQUIRE _A_TB0CCR2_L
     50          
     51          // Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow

   \                                 In  segment CODE, align 2
     52          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     53          	//--------------------------------------------------------------------
     54          	// Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow
     55          	TB1CTL = RESET_REGISTER; // Clear TB1 Control Register
   \   000000   8243C003     MOV.W   #0x0, &0x3c0
     56          	TB1EX0 = RESET_REGISTER; // Clear TAIDEX Register
   \   000004   8243E003     MOV.W   #0x0, &0x3e0
     57          	TB1CTL |= TBSSEL__SMCLK; // SMCLK source
   \   000008   B2D00002C003 BIS.W   #0x200, &0x3c0
     58          	TB1CTL |= MC__CONTINOUS; // Continuous up to 0xFFFF and overflow
   \   00000E   B2D02000C003 BIS.W   #0x20, &0x3c0
     59          	TB1CTL |= ID__2; // Divide clock by 2
   \   000014   B2D04000C003 BIS.W   #0x40, &0x3c0
     60          	TB1EX0 |= TBIDEX__8; // Divide clock by an additional 8
   \   00001A   B2D00700E003 BIS.W   #0x7, &0x3e0
     61          	TB1CTL |= TBCLR; // Resets TB1R,
   \   000020   A2D2C003     BIS.W   #0x4, &0x3c0
     62          	// Capture Compare 0
     63          	// #pragma vector = TIMER0_B1_VECTOR
     64          	// Capture Compare 0
     65          	TB1CCR0 = TB1CCR0_INTERVAL; // CCR0
   \   000024   B240A861D203 MOV.W   #0x61a8, &0x3d2
     66          	TB1CCTL0 |= CCIE; // CCR0 enable interrupt
   \   00002A   B2D01000C203 BIS.W   #0x10, &0x3c2
     67          	// Capture Compare 1,2, Overflow
     68          	// #pragma vector = TIMER0_A1_VECTOR
     69          	// Capture compare 1
     70          	//TB1CCR1 = TB1CCR1_INTERVAL;// CCR1
     71          	//TB1CCTL1 |= CCIE; // CCR1 enable interrupt
     72          	// Capture compare 2
     73          	//TB1CCR2 = TB1CCR2_INTERVAL;// CCR2
     74          	//TB1CCTL2 |= CCIE; // CCR2 enable interrupt
     75          	// Overflow
     76          	TB1CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000030   A2C3C003     BIC.W   #0x2, &0x3c0
     77          	TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000034   92C3C003     BIC.W   #0x1, &0x3c0
     78          	//--------------------------------------------------------------------
     79          }
   \   000038   1001         RETA
   \   00003A                REQUIRE _A_TB1CTL_L
   \   00003A                REQUIRE _A_TB1EX0_L
   \   00003A                REQUIRE _A_TB1CCR0_L
   \   00003A                REQUIRE _A_TB1CCTL0_L
     80          

   \                                 In  segment CODE, align 2
     81          void Init_Timer_B3(void) {
   \                     Init_Timer_B3:
     82          	//------------------------------------------------------------------------------
     83          	// SMCLK source, up count mode, PWM Right Side
     84          	// TB3.1 P6.0 R_FORWARD
     85          	// TB3.2 P6.1 L_FORWARD
     86          	// TB3.3 P6.2 R_REVERSE
     87          	// TB3.4 P6.3 L_REVERSE
     88          	//------------------------------------------------------------------------------
     89            TB3CTL = TBSSEL__SMCLK; // SMCLK
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     90            TB3CTL |= MC__UP; // Up Mode
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
     91            TB3CTL |= TBCLR; // Clear TAR
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
     92          
     93            TB3CCR0 = WHEEL_PERIOD; // PWM Period
   \   000010   B240409C5204 MOV.W   #0x9c40, &0x452
     94          
     95            TB3CCTL1 = OUTMOD_7; // CCR1 reset/set
   \   000016   B240E0004404 MOV.W   #0xe0, &0x444
     96            RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM duty cycle
   \   00001C   82435404     MOV.W   #0x0, &0x454
     97          
     98            TB3CCTL2 = OUTMOD_7; // CCR2 reset/set
   \   000020   B240E0004604 MOV.W   #0xe0, &0x446
     99            LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM duty cycle
   \   000026   82435604     MOV.W   #0x0, &0x456
    100          
    101            TB3CCTL3 = OUTMOD_7; // CCR3 reset/set
   \   00002A   B240E0004804 MOV.W   #0xe0, &0x448
    102            RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM duty cycle
   \   000030   82435804     MOV.W   #0x0, &0x458
    103          
    104            TB3CCTL4 = OUTMOD_7; // CCR4 reset/set
   \   000034   B240E0004A04 MOV.W   #0xe0, &0x44a
    105            LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM duty cycle
   \   00003A   82435A04     MOV.W   #0x0, &0x45a
    106          	//------------------------------------------------------------------------------
    107          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_TB3CTL_L
   \   000040                REQUIRE _A_TB3CCR0_L
   \   000040                REQUIRE _A_TB3CCTL1_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCTL2_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCTL3_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCTL4_L
   \   000040                REQUIRE _A_TB3CCR4_L
    108          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B1
        0   -> Init_Timer_B3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      70  Init_Timer_B0
      58  Init_Timer_B1
      64  Init_Timer_B3
      12  Init_Timers
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L

 
 204 bytes in segment CODE
  40 bytes in segment DATA16_AN
 
 204 bytes of CODE memory
   0 bytes of DATA memory (+ 40 bytes shared)

Errors: none
Warnings: none
